// 指定使用 proto3 语法。如果你不写，默认是 proto2。
syntax = "proto3";

// 定义包名，这有助于防止不同 .proto 文件之间的命名冲突。
// 在生成的 Go 代码中，这会成为包名的一部分。
package greeter;

// [重要] 为 Go 语言指定生成的包路径。
// 你应该把它改成你自己项目的 Go module 路径。
// 例如： "github.com/your_user/your_project/protos/greeter"
option go_package = "example.com/my-grpc-app/greeter";

// 定义服务 (Service)。服务可以看作是 RPC 方法的集合。
// 客户端可以调用这些方法。
service Greeter {
  // 定义一个 RPC 方法，名为 SayHello。
  // 它接收一个 HelloRequest 消息作为参数，
  // 并返回一个 HelloReply 消息。
  rpc SayHello (HelloRequest) returns (HelloReply) {}
}

// 定义请求消息 (Request Message)。
// 它定义了调用 SayHello 方法时需要传递的数据结构。
message HelloRequest {
  // 字段类型: string
  // 字段名: name
  // 字段编号: 1 (在一个 message 中，每个字段的编号必须是唯一的)
  string name = 1;
}

// 定义响应消息 (Response Message)。
// 它定义了 SayHello 方法成功返回时的数据结构。
message HelloReply {
  string message = 1;
}
