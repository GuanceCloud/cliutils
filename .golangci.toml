[linters-settings]

  [linters-settings.depguard]
  list-type = "blacklist"
  packages = [
    # "github.com/sirupsen/logrus"
  ]

	[[linters-settings.depguard.packages-with-error-message]]
	#"github.com/sirupsen/logrus" = "logging is allowed only by logutils.Log"

  [linters-settings.dupl]
  threshold = 100.0

  #[linters-settings.exhaustive]
  #default-signifies-exhaustive = false

  [linters-settings.funlen]
  lines = 100.0
  statements = 50.0

  [linters-settings.gci]
  local-prefixes = "github.com/golangci/golangci-lint"

  [linters-settings.goconst]
  min-len = 2.0
  min-occurrences = 2.0

  [linters-settings.gocritic]
  enabled-tags = [
    "diagnostic",
    "experimental",
    "opinionated",
    "performance",
    "style"
  ]
  disabled-checks = [
    "dupImport",
    "ifElseChain",
    "octalLiteral",
    "whyNoLint",
    "wrapperFunc"
  ]

  [linters-settings.gocyclo]
  min-complexity = 15.0

  [linters-settings.goimports]
  local-prefixes = "github.com/golangci/golangci-lint"

  [linters-settings.golint]
  min-confidence = 0.0

  [linters-settings.gomnd]

    [linters-settings.gomnd.settings]

      [linters-settings.gomnd.settings.mnd]
      checks = "argument,case,condition,return"

  [linters-settings.govet]
  check-shadowing = true

    [linters-settings.govet.settings]

      [linters-settings.govet.settings.printf]
      funcs = [
        "(github.com/golangci/golangci-lint/pkg/logutils.Log).Infof",
        "(github.com/golangci/golangci-lint/pkg/logutils.Log).Warnf",
        "(github.com/golangci/golangci-lint/pkg/logutils.Log).Errorf",
        "(github.com/golangci/golangci-lint/pkg/logutils.Log).Fatalf"
      ]

  [linters-settings.lll]
  line-length = 140.0

  [linters-settings.maligned]
  suggest-new = true

  [linters-settings.misspell]
  locale = "US"

  [linters-settings.nolintlint]
  allow-leading-space = true
  allow-unused = false
  require-explanation = false
  require-specific = false

[linters]
enable-all = true
disable = [
  # 权且放开他们
  "testpackage",      # Too strict
  "wrapcheck",        # 不便于错误处理
  "tagliatelle",      # 跟现有 json tag 命名方式
  "paralleltest",     # 可开启，改动范围较大
  "noctx",            # 要求 HTTP 请求都用 context 形式，改动较大
  "nlreturn",         # 要求 return 语句前有一个空行
  "gomnd",            # 不放过任何一个魔术数
  "wsl",              # 更好代码分段
  "prealloc",         # Too many false-positive.
  "nestif",           # Too many false-positive.
  "goerr113",         # 不能 fmt.Errorf/errors.New
  "gochecknoglobals", # 不能搞全局变量
  "exhaustivestruct", # 结构体初始化字段是否完整
  "golint",           # Too strict
	"godot",            # panic on make lint
  "interfacer",
  "scopelint",        # obsoluted: https://github.com/kyoh86/scopelint#obsoleted

  # 代码太复杂
  "gocognit",
  "gocyclo",

  "dupl",     # 还不允许有相似代码
  "maligned", # deprecated: https://github.com/mdempsky/maligned

  "cyclop",
  "gomoddirectives", # used `replace' in go.mod
  "nolintlint",
  "revive",
]

[issues]
  [[issues.exclude-rules]]
  path = "(.+)_test.go"
	linters = ["goconst", "funlen",  "lll", "gosec", "stylecheck", "wsl", "unused", "deadcode", "unparam", "varcheck"]

[run]
skip-dirs = []
timeout = "1h"
